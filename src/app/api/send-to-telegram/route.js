import { NextResponse } from 'next/server';
import fetch from 'node-fetch';
import FormData from 'form-data';

export async function POST(request) {
	try {
		// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Telegram
		const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
		const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

		if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
			return NextResponse.json(
				{ message: '–ù–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ Telegram –±–æ—Ç–∞' },
				{ status: 500 }
			);
		}

		// –û—Ç—Ä–∏–º—É—î–º–æ FormData –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –∑–∞–ø–∏—Ç—É
		const formData = await request.formData();

		// –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –∑ —Ñ–æ—Ä–º–∏
		const lastName = formData.get('lastName');
		const firstName = formData.get('firstName');
		const phone = formData.get('phone');
		const email = formData.get('email');
		const comment = formData.get('comment');
		const file = formData.get('file');

		// –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		let messageText = `üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –∑ —Å–∞–π—Ç—É:\n\n`;
		messageText += `üß∏ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${lastName} ${firstName}\n`;
		messageText += `‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n`;
		messageText += `‚úâÔ∏è Email: ${email}\n`;

		if (comment) {
			messageText += `üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: ${comment}\n`;
		}

		// –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		const messageResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				chat_id: TELEGRAM_CHAT_ID,
				text: messageText,
				parse_mode: 'HTML',
			}),
		});

		if (!messageResponse.ok) {
			throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: ${messageResponse.status}`);
		}

		// –Ø–∫—â–æ —î —Ñ–∞–π–ª, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
		if (file && file.size > 0) {
			// –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Ñ–∞–π–ª —É –±—É—Ñ–µ—Ä
			const fileBuffer = Buffer.from(await file.arrayBuffer());
			const filename = file.name || 'attachment';

			// –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É FormData –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª—É
			const telegramFormData = new FormData();
			telegramFormData.append('chat_id', TELEGRAM_CHAT_ID);
			telegramFormData.append('document', fileBuffer, {
				filename: filename,
				contentType: file.type,
			});
			telegramFormData.append('caption', `üìé –§–∞–π–ª –≤—ñ–¥ ${firstName} ${lastName}`);

			const fileResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument`, {
				method: 'POST',
				body: telegramFormData,
			});

			if (!fileResponse.ok) {
				throw new Error(`–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É –≤ Telegram: ${fileResponse.status}`);
			}
		}

		return NextResponse.json({ message: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ' });
	} catch (error) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram:', error);
		return NextResponse.json(
			{ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ñ–æ—Ä–º–∏', error: error.message },
			{ status: 500 }
		);
	}
}